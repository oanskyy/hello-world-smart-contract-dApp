#Hardhat
This project focuses on using **Hardhat**. It is a development environment for building on Ethereum. Hardhat is the newer kid on the block and tends to be a bit cleaner/easier to use, they also have lots of plugins to make it more customizable.

###
Steps:
**#1. Create and Deploy your Smart Contract using Hardhat**
**#2. Interacting with a Smart Contract**
**#3. Submitting a Smart Contract to Etherscan**
**#4. Integrating Your Smart Contract with the Frontend**

###
**Instalations:**
**1.1 Connect to the Ethereum network**
- use Alchemy API that allows us to communicate with the Ethereum chain without running our own nodes.
**1.2 Create your app (and API key)**
- generate an API key by creating an app. This will allow us to make requests to the Sepolia test network
**1.3 Create an Ethereum ACCOUNT ADDRESS**
- download and create a Metamask account for free
- switch to the ‚ÄúSepolia Test Network‚Äù in the upper right corner (to use test/fake money)
**1.4 Add (test) Ether from a Faucet (Sepolia)**
  To deploy oursmart contract to the test network, we‚Äôll need some fake ETH. To get ETH, you can go to the Sepolia faucet and log into your Alchemy account and enter your wallet address, then click ‚ÄúSend Me ETH.‚Äù
  https://www.alchemy.com/faucets/ethereum-sepolia
**1.5 Check your Balance**
**1.6 Initialize our Project**
  _mkdir hello-world_
  _cd hello-world_
  _npm init_

---
**1.7 Download Hardhat**
Hardhat is a development environment to compile, deploy, test, and debug your Ethereum software. It helps developers build smart contracts and dApps locally before deploying to the live chain.
_npm install --save-dev hardhat_

**1.8 Create a Hardhat Project**
*npx hardhat init*
This will generate a hardhat.config.js file for us, which is where we‚Äôll specify all of the set up for our project

**1.9 Add project folders**
*mkdir contracts*
*mkdir scripts*

contracts/ is where we‚Äôll keep our Hello World smart contract code file
scripts/ is where we‚Äôll keep scripts to deploy and interact with our contract

hello-world-dapp/
‚îÇ
‚îú‚îÄ‚îÄ .gitignore            # Git ignore file
‚îÇ
‚îú‚îÄ‚îÄ contracts/            # Solidity smart contract files
‚îÇ   ‚îî‚îÄ‚îÄ HelloWorld.sol   
‚îÇ
‚îú‚îÄ‚îÄ scripts/              # Hardhat deployment scripts or other scripts
‚îÇ   ‚îî‚îÄ‚îÄ deploy.js        
‚îÇ
‚îú‚îÄ‚îÄ src/                  # Frontend source files
‚îÇ   ‚îú‚îÄ‚îÄ components/       # Reusable UI components
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ HelloWorld.js
‚îÇ   ‚îú‚îÄ‚îÄ css/              # CSS files
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ styles.css
‚îÇ   ‚îú‚îÄ‚îÄ images/           # Image assets
‚îÇ   ‚îú‚îÄ‚îÄ App.js            # Main application component
‚îÇ   ‚îî‚îÄ‚îÄ index.js          # Entry point for frontend
‚îÇ
‚îú‚îÄ‚îÄ test/                 # Test files for smart contracts
‚îÇ   ‚îî‚îÄ‚îÄ hello-world-test.js
‚îÇ
‚îú‚îÄ‚îÄ hardhat.config.js     # Hardhat configuration file
‚îÇ
‚îú‚îÄ‚îÄ .env                  # Environment variables (e.g., Alchemy API key)
‚îÇ
‚îú‚îÄ‚îÄ package.json          # npm package configuration
‚îÇ
‚îú‚îÄ‚îÄ node_modules/         # Installed npm packages
‚îÇ
‚îî‚îÄ‚îÄ README.md             # Project documentation


###
**Smart Contract:**
**1.10 Write our Smart Contract**
- Smart contracts are written in a language called Solidity, which we will use to write our HelloWorld.sol smart contract.‚Äå
- Navigate to the ‚Äúcontracts‚Äù folder and create a new file called HelloWorld.sol
- Below is a sample Hello World smart contract from the Ethereum Foundation that we will be using for this project 
- Copy and paste the contents below into your HelloWorld.sol file.
- This is a super simple smart contract that stores a message upon creation and can be updated by calling the update function.
**1.11 Connect MetaMask & Alchemy to your project**
We‚Äôve created a Metamask wallet, an Alchemy account, and written our smart contract. Now, it‚Äôs time to connect the three.

Every transaction sent from your virtual wallet requires a signature using your unique private key. We can safely store our private key (and Alchemy API key) in an environment file to provide our program with this permission.
First, install the dotenv package in your project directory:
*npm install dotenv --save*

create a .env file in the root directory of our project, and add your Metamask private key and HTTP Alchemy API URL to it.

**1.12 Install Ethers.js**
Ethers.js is a library that makes it easier to interact and make requests to Ethereum by wrapping standard JSON-RPC methods with more user-friendly methods.

Hardhat makes it super easy to integrate Plugins for additional tooling and extended functionality. We‚Äôll be taking advantage of the Ethers plugin for contract deployment (Ethers.js has some super clean contract deployment methods).

*npm install ethers@5.7.2*
*npm install --save-dev @nomiclabs/hardhat-ethers*

**1.13 Update hardhat.config.js**
We‚Äôve added several dependencies and plugins so far, now we need to update hardhat.config.js so that our project knows about all of them.

**1.14 Compile our contract**
The compile task is one of the built-in hardhat tasks.
*npx hardhat compile*
Compiled 1 Solidity file successfully (evm target: istanbul).

**1.15 Write the deploy script**
Navigate to the scripts/ folder and create a new file called deploy.js, adding the following contents to it:

---
deploy.js
async function main() {
   const HelloWorld = await ethers.getContractFactory("HelloWorld");

   // Start deployment, returning a promise that resolves to a contract object
   const hello_world = await HelloWorld.deploy("Hello World!");   
   console.log("Contract deployed to address:", hello_world.address);
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });
---

Hardhat does an amazing job of explaining what each of these lines of code does in their Contracts tutorial, we‚Äôve adopted their explanations here.

---
*const HelloWorld = await ethers.getContractFactory("HelloWorld");*
A *ContractFactory* in ethers.js is an abstraction used to *deploy new smart contracts*, so HelloWorld here is a factory for instances of our Hello World contract. When using the hardhat-ethers plugin ContractFactory and Contract, instances are connected to the first signer (owner) by default.

---
*const hello_world = await HelloWorld.deploy();*
Calling *deploy()* on a *ContractFactory* will start the deployment and return a Promise that resolves to a Contract object. This object has a method for each of our smart contract functions.


**1.16 Deploy the contract**
*npx hardhat run scripts/deploy.js --network sepolia*
You should then see something like:
Contract deployed to address: 0xBdbcBd678EaB4cD8e4e3c3BF943D5faa269Bd9E1
copy and paste this address to save it somewhere. 

 go to the Sepolia etherscan and search for our contract address, we should see that it has been deployed successfully. 
 https://sepolia.etherscan.io/ 

 The From address should match your Metamask account address and the To address will say ‚ÄúContract Creation‚Äù, 
 but if we click into the transaction, we‚Äôll see our contract address in the To field. 0xBdbcBd678EaB4cD8e4e3c3BF943D5faa269Bd9E1 

 Congrats! You just deployed a smart contract to the Ethereum chain üéâ